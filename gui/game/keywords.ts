import { Language } from "./supportedLanguages";

const keywords: Record<Language, Set<string>> = {
  RUBY: new Set([
    "__ENCODING__",
    "__LINE__",
    "__FILE__",
    "BEGIN",
    "END",
    "alias",
    "and",
    "begin",
    "break",
    "case",
    "class",
    "def",
    "defined?",
    "do",
    "else",
    "elsif",
    "end",
    "ensure",
    "false",
    "for",
    "if",
    "in",
    "module",
    "next",
    "nil",
    "not",
    "or",
    "redo",
    "rescue",
    "retry",
    "return",
    "self",
    "super",
    "then",
    "true",
    "undef",
    "unless",
    "until",
    "when",
    "while",
    "yield",
  ]),
  PYTHON: new Set([
    "False",
    "None",
    "True",
    "__peg_parser__",
    "and",
    "as",
    "assert",
    "async",
    "await",
    "break",
    "class",
    "continue",
    "def",
    "del",
    "elif",
    "else",
    "except",
    "finally",
    "for",
    "from",
    "global",
    "if",
    "import",
    "in",
    "is",
    "lambda",
    "nonlocal",
    "not",
    "or",
    "pass",
    "raise",
    "return",
    "try",
    "while",
    "with",
    "yield",
  ]),
  // NOTE: To simplify the syntax highlighting, we're hardcoding int*, char**,
  // and other similar pointer types as keywords in this set.
  C: new Set([
    "auto",
    "break",
    "case",
    "char",
    "char*",
    "char**",
    "const",
    "continue",
    "default",
    "do",
    "double",
    "double*",
    "double**",
    "else",
    "enum",
    "extern",
    "float",
    "float*",
    "float**",
    "for",
    "goto",
    "if",
    "inline",
    "int",
    "int*",
    "int**",
    "long",
    "long*",
    "long**",
    "register",
    "restrict",
    "return",
    "short",
    "short*",
    "short**",
    "signed",
    "sizeof",
    "static",
    "struct",
    "switch",
    "typedef",
    "union",
    "unsigned",
    "void",
    "void*",
    "void**",
    "volatile",
    "while",
  ]),
};

export default keywords;
